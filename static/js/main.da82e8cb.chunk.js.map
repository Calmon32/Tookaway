{"version":3,"sources":["components/SearchBar.js","components/RestaurantCard.js","components/CardList.js","App.js","index.js"],"names":["SearchBar","props","Navbar","expand","className","variant","Container","Brand","href","style","fontWeight","fontSize","Toggle","aria-controls","Collapse","id","Form","inline","Control","type","placeholder","onChange","changeSearch","Group","controlId","Label","column","as","changeSorting","value","RestaurantCard","SortText","sorting","restaurant","sortingValues","topRestaurants","bestMatch","newest","ratingAverage","distance","popularity","averageProductPrice","deliveryCosts","minCost","Card","Img","backgroundColor","src","ImgOverlay","onClick","favorite","fav","alt","Body","Title","name","Text","status","sortRestaurants","restaurants","sortingType","searchString","searchFilter","sort","a","b","afav","bfav","astatus","bstatus","valueSorting","filter","index","toLowerCase","indexOf","x","y","CardList","search","map","key","App","state","favorites","sortingBy","loading","handleSortChange","bind","handleSearchChange","handleFavorite","event","this","setState","target","prevState","favs","update","$set","console","log","localStorage","setItem","JSON","stringify","fetch","then","res","json","data","loadData","catch","err","fakeData","parse","getItem","undefined","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.da82e8cb.chunk.js","sourcesContent":["import React from 'react';\nimport { Navbar, Form, Container } from 'react-bootstrap'\n\nfunction SearchBar(props) {\n    return <Navbar expand=\"lg\" className=\"NavBar\" variant=\"dark\">\n        <Container>\n            <Navbar.Brand href=\"/\"><h1 className=\"title\">Tookaway<span style={{ fontWeight: \"100\", fontSize: \"30px\" }}>.com</span></h1></Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\" className=\"justify-content-end\">\n                <Form inline>\n                    <Form.Control type=\"text\" placeholder=\"Search\" onChange={props.changeSearch} />\n                    <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                        <Form.Label column className=\"text\">Sort by:</Form.Label>\n                        <Form.Control as=\"select\" onChange={props.changeSorting}>\n                            <option value=\"-1\">Top Restaurants</option>\n                            <option value=\"0\">Best Match</option>\n                            <option value=\"1\">Newest</option>\n                            <option value=\"2\">Avg. Rating</option>\n                            <option value=\"3\">Distance</option>\n                            <option value=\"4\">Popularity</option>\n                            <option value=\"5\">Avg. Price</option>\n                            <option value=\"6\">Delivery Costs</option>\n                            <option value=\"7\">Min. Costs</option>\n                        </Form.Control>\n                    </Form.Group>\n                </Form>\n            </Navbar.Collapse>\n        </Container>\n    </Navbar>\n}\n\nexport default SearchBar","import React from 'react';\nimport { Card } from 'react-bootstrap'\n\nfunction RestaurantCard(props) {\n    let SortText = null;\n    switch (props.sorting) {\n        case \"-1\":\n            SortText = `TopRestaurants: ${props.restaurant.sortingValues.topRestaurants}`\n            break\n\n        case \"0\":\n            SortText = `BestMatch: ${props.restaurant.sortingValues.bestMatch}`\n            break\n\n        case \"1\":\n            SortText = `Newest: ${props.restaurant.sortingValues.newest}`\n            break\n\n        case \"2\":\n            SortText = `RatingAverage: ${props.restaurant.sortingValues.ratingAverage}`\n            break\n\n        case \"3\":\n            SortText = `Distance: ${props.restaurant.sortingValues.distance}`\n            break\n        case \"4\":\n            SortText = `Popularity: ${props.restaurant.sortingValues.popularity}`\n            break\n\n        case \"5\":\n            SortText = `AverageProductPrice: ${props.restaurant.sortingValues.averageProductPrice}`\n            break\n\n        case \"6\":\n            SortText = `DeliveryCosts: ${props.restaurant.sortingValues.deliveryCosts}`\n            break\n\n        case \"7\":\n            SortText = `MinCost: ${props.restaurant.sortingValues.minCost}`\n            break\n\n        default:\n            SortText = ``\n            break\n    }\n    return <div className=\"restaurant-card\">\n        <Card>\n            <Card.Img style={{ backgroundColor: \"lightgrey\" }} variant=\"top\" src=\"./chef.png\" />\n            <Card.ImgOverlay>\n                <button onClick={() => { props.favorite(props.restaurant) }} className=\"fav-btn\">\n                    {props.restaurant.fav ?\n                        <img className=\"fav-btn\" src=\"./heart-full.png\" alt=\"favorite\"></img>\n                        :\n                        <img className=\"fav-btn\" src=\"./heart-empty.png\" alt=\"not favorite\"></img>\n                    }\n                </button>\n            </Card.ImgOverlay>\n            <Card.Body>\n                <Card.Title>{props.restaurant.name}</Card.Title>\n                <Card.Text style={{ fontSize: '12px' }}>\n                    {SortText}\n                </Card.Text>\n                <button className={`order-btn ${props.restaurant.status}`}>\n                    <img className=\"status-icon\" src={props.restaurant.status === \"closed\" ? \"./closed.png\" :\n                        props.restaurant.status === \"open\" ? \"./scooter.png\" : \"./clock.png\"} alt=\"status icon\"></img>\n                    {props.restaurant.status === \"closed\" ? \"Closed\" :\n                        props.restaurant.status === \"open\" ? \"Order Now\" : \"Order Ahead\"}\n                </button>\n            </Card.Body>\n        </Card>\n    </div>\n}\n\nexport default RestaurantCard","import React from 'react';\nimport RestaurantCard from './RestaurantCard'\n\nlet CardList = (props) => {\n    return <div className=\"grid-container\">\n        <div className=\"card-grid\">\n            {sortRestaurants(props.restaurants, props.sorting, props.search)\n                .map((restaurant, index) => {\n                    return <RestaurantCard restaurant={restaurant} key={index} {...props} />\n                })}\n        </div>\n    </div>\n}\n\nexport let sortRestaurants = (restaurants, sortingType, searchString) => {\n    return searchFilter(restaurants, searchString).sort((a, b) => {\n        let afav = a.fav ? 0 : 1;\n        let bfav = b.fav ? 0 : 1;\n\n        let astatus = a.status === \"closed\" ? 2 :\n            a.status === \"open\" ? 0 : 1;\n\n        let bstatus = b.status === \"closed\" ? 2 :\n            b.status === \"open\" ? 0 : 1;\n\n        // Sort priority: Favorite > Opening status > value sorting\n        return afav - bfav || astatus - bstatus || valueSorting(a, b, sortingType)\n    })\n}\n\nexport let searchFilter = (restaurants, searchString) => {\n    if (searchString && searchString !== \"\") {\n        return restaurants.filter((restaurant, index) => {\n            return restaurant.name.toLowerCase().indexOf(searchString.toLowerCase()) !== -1\n        })\n    } else {\n        return restaurants\n    }\n}\n\nlet valueSorting = (x, y, sorting) => {\n    switch (sorting) {\n        case \"-1\":\n            return y.sortingValues.topRestaurants - x.sortingValues.topRestaurants\n\n        case \"0\":\n            return x.sortingValues.bestMatch - y.sortingValues.bestMatch\n\n        case \"1\":\n            return x.sortingValues.newest - y.sortingValues.newest\n\n        case \"2\":\n            return y.sortingValues.ratingAverage - x.sortingValues.ratingAverage\n\n        case \"3\":\n            return x.sortingValues.distance - y.sortingValues.distance\n\n        case \"4\":\n            return y.sortingValues.popularity - x.sortingValues.popularity\n\n        case \"5\":\n            return x.sortingValues.averageProductPrice - y.sortingValues.averageProductPrice\n\n        case \"6\":\n            return x.sortingValues.deliveryCosts - y.sortingValues.deliveryCosts\n\n        case \"7\":\n            return x.sortingValues.minCost - y.sortingValues.minCost\n\n        default:\n            return 0\n    }\n}\n\nexport default CardList","import React, { Component } from 'react'\nimport update from 'react-addons-update';\nimport SearchBar from './components/SearchBar'\nimport CardList from './components/CardList'\nimport './styles/App.scss';\nimport fakeData from './restaurants.json';\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      restaurants: [],\n      favorites: {},\n      search: \"\",\n      sortingBy: \"-1\",\n      loading: true\n    }\n    this.handleSortChange = this.handleSortChange.bind(this);\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n    this.handleFavorite = this.handleFavorite.bind(this);\n  }\n\n  handleSortChange(event) {\n    this.setState({\n      sortingBy: event.target.value\n    })\n  }\n\n  handleSearchChange(event) {\n    this.setState({\n      search: event.target.value\n    })\n  }\n\n  handleFavorite(restaurant) {\n    let index = this.state.restaurants.indexOf(restaurant)\n    this.setState(prevState => {\n      let favs = prevState.favorites\n      favs[restaurant.name] = !restaurant.fav\n      return {\n        restaurants: update(prevState.restaurants, { [index]: { fav: { $set: !restaurant.fav } } }),\n        favorites: favs\n      }\n    }, () => {\n      console.log(this.state.favorites)\n      localStorage.setItem('favorite-restaurants', JSON.stringify(this.state.favorites))\n    })\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:3000/api\").then((res) => {\n      return res.json()\n    }).then((data) => {\n      this.loadData(data)\n    }).catch(err => {\n      console.log(\"Failed to fetch data. Using fake data.\")\n      this.loadData(fakeData)\n    })\n  }\n\n  loadData(data) {\n    let favorites = JSON.parse(localStorage.getItem('favorite-restaurants'))\n    if (!favorites) favorites = {}\n    data.restaurants.map((restaurant) => {\n      let value = favorites[restaurant.name]\n      restaurant.fav = value !== undefined ? value : false;\n      restaurant.sortingValues.topRestaurants = ((restaurant.sortingValues.distance * restaurant.sortingValues.popularity) + restaurant.sortingValues.ratingAverage);\n    })\n    this.setState({\n      restaurants: data.restaurants,\n      favorites: favorites,\n      loading: false\n    })\n  }\n\n  render() {\n    return <div>\n      <SearchBar changeSorting={this.handleSortChange} changeSearch={this.handleSearchChange}></SearchBar>\n      <CardList loading={this.state.loading} favorite={this.handleFavorite} sorting={this.state.sortingBy} restaurants={this.state.restaurants} search={this.state.search}></CardList>\n    </div>\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\n\nimport App from './App';\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n"],"sourceRoot":""}